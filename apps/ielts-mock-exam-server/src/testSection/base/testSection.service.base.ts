/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TestSection as PrismaTestSection,
  TestContent as PrismaTestContent,
} from "@prisma/client";

export class TestSectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TestSectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.testSection.count(args);
  }

  async testSections(
    args: Prisma.TestSectionFindManyArgs
  ): Promise<PrismaTestSection[]> {
    return this.prisma.testSection.findMany(args);
  }
  async testSection(
    args: Prisma.TestSectionFindUniqueArgs
  ): Promise<PrismaTestSection | null> {
    return this.prisma.testSection.findUnique(args);
  }
  async createTestSection(
    args: Prisma.TestSectionCreateArgs
  ): Promise<PrismaTestSection> {
    return this.prisma.testSection.create(args);
  }
  async updateTestSection(
    args: Prisma.TestSectionUpdateArgs
  ): Promise<PrismaTestSection> {
    return this.prisma.testSection.update(args);
  }
  async deleteTestSection(
    args: Prisma.TestSectionDeleteArgs
  ): Promise<PrismaTestSection> {
    return this.prisma.testSection.delete(args);
  }

  async findTestContents(
    parentId: string,
    args: Prisma.TestContentFindManyArgs
  ): Promise<PrismaTestContent[]> {
    return this.prisma.testSection
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .testContents(args);
  }
}
