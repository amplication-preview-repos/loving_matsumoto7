/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TestSection } from "./TestSection";
import { TestSectionCountArgs } from "./TestSectionCountArgs";
import { TestSectionFindManyArgs } from "./TestSectionFindManyArgs";
import { TestSectionFindUniqueArgs } from "./TestSectionFindUniqueArgs";
import { CreateTestSectionArgs } from "./CreateTestSectionArgs";
import { UpdateTestSectionArgs } from "./UpdateTestSectionArgs";
import { DeleteTestSectionArgs } from "./DeleteTestSectionArgs";
import { TestContentFindManyArgs } from "../../testContent/base/TestContentFindManyArgs";
import { TestContent } from "../../testContent/base/TestContent";
import { TestSectionService } from "../testSection.service";
@graphql.Resolver(() => TestSection)
export class TestSectionResolverBase {
  constructor(protected readonly service: TestSectionService) {}

  async _testSectionsMeta(
    @graphql.Args() args: TestSectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TestSection])
  async testSections(
    @graphql.Args() args: TestSectionFindManyArgs
  ): Promise<TestSection[]> {
    return this.service.testSections(args);
  }

  @graphql.Query(() => TestSection, { nullable: true })
  async testSection(
    @graphql.Args() args: TestSectionFindUniqueArgs
  ): Promise<TestSection | null> {
    const result = await this.service.testSection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TestSection)
  async createTestSection(
    @graphql.Args() args: CreateTestSectionArgs
  ): Promise<TestSection> {
    return await this.service.createTestSection({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TestSection)
  async updateTestSection(
    @graphql.Args() args: UpdateTestSectionArgs
  ): Promise<TestSection | null> {
    try {
      return await this.service.updateTestSection({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TestSection)
  async deleteTestSection(
    @graphql.Args() args: DeleteTestSectionArgs
  ): Promise<TestSection | null> {
    try {
      return await this.service.deleteTestSection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TestContent], { name: "testContents" })
  async findTestContents(
    @graphql.Parent() parent: TestSection,
    @graphql.Args() args: TestContentFindManyArgs
  ): Promise<TestContent[]> {
    const results = await this.service.findTestContents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
