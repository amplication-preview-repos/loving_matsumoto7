/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserDashboard } from "./UserDashboard";
import { UserDashboardCountArgs } from "./UserDashboardCountArgs";
import { UserDashboardFindManyArgs } from "./UserDashboardFindManyArgs";
import { UserDashboardFindUniqueArgs } from "./UserDashboardFindUniqueArgs";
import { CreateUserDashboardArgs } from "./CreateUserDashboardArgs";
import { UpdateUserDashboardArgs } from "./UpdateUserDashboardArgs";
import { DeleteUserDashboardArgs } from "./DeleteUserDashboardArgs";
import { UserDashboardService } from "../userDashboard.service";
@graphql.Resolver(() => UserDashboard)
export class UserDashboardResolverBase {
  constructor(protected readonly service: UserDashboardService) {}

  async _userDashboardsMeta(
    @graphql.Args() args: UserDashboardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserDashboard])
  async userDashboards(
    @graphql.Args() args: UserDashboardFindManyArgs
  ): Promise<UserDashboard[]> {
    return this.service.userDashboards(args);
  }

  @graphql.Query(() => UserDashboard, { nullable: true })
  async userDashboard(
    @graphql.Args() args: UserDashboardFindUniqueArgs
  ): Promise<UserDashboard | null> {
    const result = await this.service.userDashboard(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserDashboard)
  async createUserDashboard(
    @graphql.Args() args: CreateUserDashboardArgs
  ): Promise<UserDashboard> {
    return await this.service.createUserDashboard({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserDashboard)
  async updateUserDashboard(
    @graphql.Args() args: UpdateUserDashboardArgs
  ): Promise<UserDashboard | null> {
    try {
      return await this.service.updateUserDashboard({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserDashboard)
  async deleteUserDashboard(
    @graphql.Args() args: DeleteUserDashboardArgs
  ): Promise<UserDashboard | null> {
    try {
      return await this.service.deleteUserDashboard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
