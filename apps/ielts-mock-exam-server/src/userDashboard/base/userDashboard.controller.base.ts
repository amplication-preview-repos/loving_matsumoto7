/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserDashboardService } from "../userDashboard.service";
import { UserDashboardCreateInput } from "./UserDashboardCreateInput";
import { UserDashboard } from "./UserDashboard";
import { UserDashboardFindManyArgs } from "./UserDashboardFindManyArgs";
import { UserDashboardWhereUniqueInput } from "./UserDashboardWhereUniqueInput";
import { UserDashboardUpdateInput } from "./UserDashboardUpdateInput";

export class UserDashboardControllerBase {
  constructor(protected readonly service: UserDashboardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserDashboard })
  async createUserDashboard(
    @common.Body() data: UserDashboardCreateInput
  ): Promise<UserDashboard> {
    return await this.service.createUserDashboard({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        testResults: true,
        progress: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserDashboard] })
  @ApiNestedQuery(UserDashboardFindManyArgs)
  async userDashboards(
    @common.Req() request: Request
  ): Promise<UserDashboard[]> {
    const args = plainToClass(UserDashboardFindManyArgs, request.query);
    return this.service.userDashboards({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        testResults: true,
        progress: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserDashboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userDashboard(
    @common.Param() params: UserDashboardWhereUniqueInput
  ): Promise<UserDashboard | null> {
    const result = await this.service.userDashboard({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        testResults: true,
        progress: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserDashboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserDashboard(
    @common.Param() params: UserDashboardWhereUniqueInput,
    @common.Body() data: UserDashboardUpdateInput
  ): Promise<UserDashboard | null> {
    try {
      return await this.service.updateUserDashboard({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          testResults: true,
          progress: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserDashboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserDashboard(
    @common.Param() params: UserDashboardWhereUniqueInput
  ): Promise<UserDashboard | null> {
    try {
      return await this.service.deleteUserDashboard({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          testResults: true,
          progress: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
