/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TestContentService } from "../testContent.service";
import { TestContentCreateInput } from "./TestContentCreateInput";
import { TestContent } from "./TestContent";
import { TestContentFindManyArgs } from "./TestContentFindManyArgs";
import { TestContentWhereUniqueInput } from "./TestContentWhereUniqueInput";
import { TestContentUpdateInput } from "./TestContentUpdateInput";

export class TestContentControllerBase {
  constructor(protected readonly service: TestContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TestContent })
  async createTestContent(
    @common.Body() data: TestContentCreateInput
  ): Promise<TestContent> {
    return await this.service.createTestContent({
      data: {
        ...data,

        testSection: data.testSection
          ? {
              connect: data.testSection,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        description: true,

        testSection: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TestContent] })
  @ApiNestedQuery(TestContentFindManyArgs)
  async testContents(@common.Req() request: Request): Promise<TestContent[]> {
    const args = plainToClass(TestContentFindManyArgs, request.query);
    return this.service.testContents({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        description: true,

        testSection: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TestContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async testContent(
    @common.Param() params: TestContentWhereUniqueInput
  ): Promise<TestContent | null> {
    const result = await this.service.testContent({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        description: true,

        testSection: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TestContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTestContent(
    @common.Param() params: TestContentWhereUniqueInput,
    @common.Body() data: TestContentUpdateInput
  ): Promise<TestContent | null> {
    try {
      return await this.service.updateTestContent({
        where: params,
        data: {
          ...data,

          testSection: data.testSection
            ? {
                connect: data.testSection,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
          description: true,

          testSection: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TestContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTestContent(
    @common.Param() params: TestContentWhereUniqueInput
  ): Promise<TestContent | null> {
    try {
      return await this.service.deleteTestContent({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
          description: true,

          testSection: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
