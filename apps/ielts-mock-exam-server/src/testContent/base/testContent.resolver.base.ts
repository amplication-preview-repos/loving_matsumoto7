/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TestContent } from "./TestContent";
import { TestContentCountArgs } from "./TestContentCountArgs";
import { TestContentFindManyArgs } from "./TestContentFindManyArgs";
import { TestContentFindUniqueArgs } from "./TestContentFindUniqueArgs";
import { CreateTestContentArgs } from "./CreateTestContentArgs";
import { UpdateTestContentArgs } from "./UpdateTestContentArgs";
import { DeleteTestContentArgs } from "./DeleteTestContentArgs";
import { TestSection } from "../../testSection/base/TestSection";
import { TestContentService } from "../testContent.service";
@graphql.Resolver(() => TestContent)
export class TestContentResolverBase {
  constructor(protected readonly service: TestContentService) {}

  async _testContentsMeta(
    @graphql.Args() args: TestContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TestContent])
  async testContents(
    @graphql.Args() args: TestContentFindManyArgs
  ): Promise<TestContent[]> {
    return this.service.testContents(args);
  }

  @graphql.Query(() => TestContent, { nullable: true })
  async testContent(
    @graphql.Args() args: TestContentFindUniqueArgs
  ): Promise<TestContent | null> {
    const result = await this.service.testContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TestContent)
  async createTestContent(
    @graphql.Args() args: CreateTestContentArgs
  ): Promise<TestContent> {
    return await this.service.createTestContent({
      ...args,
      data: {
        ...args.data,

        testSection: args.data.testSection
          ? {
              connect: args.data.testSection,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TestContent)
  async updateTestContent(
    @graphql.Args() args: UpdateTestContentArgs
  ): Promise<TestContent | null> {
    try {
      return await this.service.updateTestContent({
        ...args,
        data: {
          ...args.data,

          testSection: args.data.testSection
            ? {
                connect: args.data.testSection,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TestContent)
  async deleteTestContent(
    @graphql.Args() args: DeleteTestContentArgs
  ): Promise<TestContent | null> {
    try {
      return await this.service.deleteTestContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => TestSection, {
    nullable: true,
    name: "testSection",
  })
  async getTestSection(
    @graphql.Parent() parent: TestContent
  ): Promise<TestSection | null> {
    const result = await this.service.getTestSection(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
