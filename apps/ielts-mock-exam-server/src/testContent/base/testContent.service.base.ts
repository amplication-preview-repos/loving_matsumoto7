/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TestContent as PrismaTestContent,
  TestSection as PrismaTestSection,
} from "@prisma/client";

export class TestContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TestContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.testContent.count(args);
  }

  async testContents(
    args: Prisma.TestContentFindManyArgs
  ): Promise<PrismaTestContent[]> {
    return this.prisma.testContent.findMany(args);
  }
  async testContent(
    args: Prisma.TestContentFindUniqueArgs
  ): Promise<PrismaTestContent | null> {
    return this.prisma.testContent.findUnique(args);
  }
  async createTestContent(
    args: Prisma.TestContentCreateArgs
  ): Promise<PrismaTestContent> {
    return this.prisma.testContent.create(args);
  }
  async updateTestContent(
    args: Prisma.TestContentUpdateArgs
  ): Promise<PrismaTestContent> {
    return this.prisma.testContent.update(args);
  }
  async deleteTestContent(
    args: Prisma.TestContentDeleteArgs
  ): Promise<PrismaTestContent> {
    return this.prisma.testContent.delete(args);
  }

  async getTestSection(parentId: string): Promise<PrismaTestSection | null> {
    return this.prisma.testContent
      .findUnique({
        where: { id: parentId },
      })
      .testSection();
  }
}
